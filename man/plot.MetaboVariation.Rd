% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot.R
\name{plot.MetaboVariation}
\alias{plot.MetaboVariation}
\alias{plot}
\title{Plot results from "MetaboVariation" object.}
\usage{
\method{plot}{MetaboVariation}(x, type = "circos", timepoints = NULL, threshold = 2, ...)
}
\arguments{
\item{x}{An object of class "MetaboVariation"}

\item{type}{A character specifying the plot type (eg: "circos", "individual_count", "metabolites_count"). By default, "circos" is shown.}

\item{timepoints}{A numeric vector containing timepoints to be shown in the plots. By default, it is NULL and will show all the timepoints}

\item{threshold}{A number to filter out individuals that have been flagged in less than "threshold" metabolites. By default, it is set at 2.}

\item{...}{Further arguments are ignored.}
}
\value{
plot will show the results of modelling in the following three ways
\itemize{
\item Circos plot - A circular plot that will show the 95\% credible interval for all the individuals across timepoints. If the actual value
is outside the interval, that bar will be flagged as black and the individual's id will be flagged and shown in \bold{bold}.
\item Metabolites count plot - A bar plot that shows the number of individuals are flagged in each timepoints out of all individuals.
For "meta.single_model" subclass, number of bars will be same as the number of timepoints for that single metabolite. For meta.multi_model" subclass, each timepoints is shown with
different color for each metabolite present in the subclass.
\item Individual count plot - A heatmap that shows how many time a particular individual is flagged for a specific metabolite. The minimum count
is 0 while the maximum count is the number of total timepoints passed. This plot is only valid for "meta.multi_model" subclass.
}
}
\description{
Plot the results for the class "MetaboVariation". It plots using plotly and circlize package.
}
\examples{
\dontrun{
data(metabol.data)
metabolite_list = colnames(metabol.data)[5:length(colnames(metabol.data))]
metabolites = get.metabolites(list = metabolite_list)
covariates = c("SexM.1F.2","Age","BMI")
individual_id = "Sample.Id"
model = MetaboVariation(data = metabol.data,individual_ids = individual_id,
metabolite = metabolites[1:3], covariates = covariates,full_posterior = TRUE)
plot(x = model, type = "circos")
plot(x = model, type = "metabolites_count",timepoints = c(1,2,4))
plot(x = model, type = "individual_count",threshold = 3)
}
}
