% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MetaboVariation.R
\name{MetaboVariation}
\alias{MetaboVariation}
\title{Models the metabolomic profiles to get individual traits}
\usage{
MetaboVariation(
  data,
  individual_ids,
  metabolite,
  covariates = NULL,
  save_brms_model = FALSE,
  full_posterior = FALSE,
  iter = 2000,
  warmup = floor(iter/2),
  ...
)
}
\arguments{
\item{data}{An object of class data.frame (or one that can be coerced to that class) containing data of all variables used for modelling.}

\item{individual_ids}{A character string that denotes the column name of individual ids present in the dataset passed.}

\item{metabolite}{A string or vector containing metabolites name that needs to be modeled.}

\item{covariates}{A list of column names present in the data that denotes the covariates data for the individuals in the data.}

\item{save_brms_model}{A logical value indicating whether the model should be saved or not. By default, it is set as FALSE}

\item{full_posterior}{A logical value indicating whether the full posterior distribution should be included or not. By default, it is set as FALSE and the summarized result is passed by the function.}

\item{iter}{Number of total iterations per chain (including warmup; defaults to 2000).}

\item{warmup}{A positive integer specifying number of warmup (aka burnin)
iterations. This also specifies the number of iterations used for stepsize
adaptation, so warmup draws should not be used for inference. The number
of warmup should not be larger than \code{iter} and the default is
\code{iter/2}.}

\item{...}{Further arguments are passed to \code{\link[brms]{brm}} for backend processes.}
}
\value{
modelling returns an object of "MetaboVariation" class with "meta.single_model" and "meta.multi_model" subclass. Sublass "meta.multi_model" is a collection of subclass "meta.single_model" objects.
And subclass "meta.single_model" contains following values.
\itemize{
\item significant_covariates - a list of covariates that influences the metabolite value significantly for the individuals. Based on the posterior distribution of the covariates, if zero lies in the 90\% credible interval, it is assumed that particular covariate has no significant realtion with the metabolite value.
\item result - It stores a summarized result for the posterior predictive distribution of the cohort. It contains the mean, 95\% credible interval range, tails of the credible interval and the original value of the individual for that timepoint. It also has a flag that shows whether the original values lies within the credible interval or not.
\item iterations - Number of total iterations per chain used for modelling (including warmup; defaults to 2000).
\item warmup - A positive integer specifying number of warmup (aka burnin) iterations. This also specifies the number of iterations used for stepsize adaptation, so warmup draws should not be used for inference. The number of warmup should not be larger than iter and the default is iter/2.
\item Rhat - Rhat refers to the potential scale reduction statistic, also known as the Gelman-Rubin statistic.
Thus, it measures the extent to which chains are converging. The further the value of the statistic from 1, the worse. Model is considered good if the value lies between 0.9 and 1.05.
\item metabolite - Contains the name of metabolite on which modelling is done.
\item full_posterior - It contains the full posterior predictive distiribution of the data. It can be used for further analysis as per the user requirements.
}
}
\description{
Fits a generalised linear model on the passed metabolites and provide results for single or multiple metabolites. It works on bayesian framework using the function \code{\link[brms]{brm}} from BRMS package.
}
\examples{
\dontrun{
data(metabol.data)
metabolite_list = colnames(metabol.data)[5:length(colnames(metabol.data))]
metabolites = get.metabolites(list = metabolite_list)
covariates = c("SexM.1F.2","Age","BMI")
individual_id = "Sample.Id"
model = MetaboVariation(data = metabol.data,individual_ids = individual_id,
metabolite = metabolites[1], covariates = covariates)
model = MetaboVariation(data = metabol.data,individual_ids = individual_id,
metabolite = metabolites[1:3], full_posterior = TRUE)
}

}
